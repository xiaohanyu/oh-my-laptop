#+TITLE: Oh My Laptop Basic
#+OPTIONS: toc:nil num:nil ^:nil

This is part of [[https://github.com/xiaohanyu/oh-my-laptop][oh-my-laptop]].

* Packages

- [[https://github.com/ggreer/the_silver_searcher][ag]]
- [[https://github.com/wting/autojump][autojump]]
- [[https://editorconfig.org/][editorconfig]]
- [[https://www.gnu.org/software/global/][global]]
- [[https://www.graphviz.org/][graphviz]]
- [[http://hisham.hm/htop/index.php][htop]]
- [[https://httpie.org/][httpie]]
- [[https://imagemagick.org/index.php][imagemagick]]
- [[https://stedolan.github.io/jq/][jq]]
- [[http://www.microbrew.org/tools/md5sha1sum/][md5sha1sum]]
- [[http://www.thp.uni-duisburg.de/pstree/][pstree]]
- [[http://ranger.nongnu.org/][ranger]]
- [[https://github.com/hanslub42/rlwrap][rlwrap]]
- [[https://www.gnu.org/software/texinfo/][texinfo]]
- [[https://github.com/XAMPPRocky/tokei][tokei]]
- [[https://github.com/jonas/tig][tig]]
- [[https://github.com/tldr-pages/tldr][tldr]]
- [[https://developer.apple.com/xcode/][tmux]]
- [[https://www.gnu.org/software/wget/][wget]]


* ag

#+BEGIN_QUOTE
A lot of my time spent “writing” code is actually spent reading code. And a
decent chunk of my time spent reading code is actually spent searching
code. Lately I’ve started working with a larger codebase. Both grep and ack
take a non-negligible amount of time to search it. Both are slow, but for
different reasons. Grep is fast, but doesn’t ignore files. Ack is very good
at ignoring files, but it’s written in Perl instead of C. What I really want is
something that’s fast and ignores files.

-- [[http://geoff.greer.fm/2011/12/27/the-silver-searcher-better-than-ack/][The Silver Searcher: Better than Ack]]
#+END_QUOTE

You can not go back to [[http://beyondgrep.com][ack]] after the first you try ag. There're lots of
third-party ag integration for various editors, check [[http://betterthanack.com/][betterthanack]].


* autojump

[[https://github.com/wting/autojump][autojump]] is a ~cd~ replacement command that learns, it provides an easy and
faster way to navigate your filesystem from the command line. It works by
maintaining a database of the directories you use the most from the command
line.

Brief usage:
- ~j foo~: jump to a directory that contains ~foo~
- ~jc bar~: jump to a child directory
- ~jc music~ or ~jco music~: open file manager to directories (instead of
  jumping)


* editorconfig

We live in a world with multiple editors or IDEs, and often we need
collaboration with others. [[http://editorconfig.org/][EditorConfig]] helps developers define and maintain
consistent coding styles between different editors and IDEs. The EditorConfig
project consists of a file format for defining coding styles and a collection
of text editor plugins that enable editors to read the file format and adhere
to defined styles. EditorConfig files are easily readable and they work nicely
with version control systems.

Check [[https://github.com/editorconfig/editorconfig-core-c/blob/master/INSTALL.md][github]] for detailed installation instructions.


* global

GNU [[https://www.gnu.org/software/global/][GLOBAL]] is a source code tagging system that works the same way across
diverse environments, such as Emacs editor, Vi editor, Less viewer, Bash shell,
various web browsers, etc.

You can locate various objects, such as functions, macros, structs, classes, in
your source files and move there easily. It is useful for hacking a large
projects which contain many sub-directories, many ~#ifdef~ and many ~main()~
functions. It is similar to ctags or etags, but is different from them in the
following two points:
- independence of any editor
- capability to treat definition and reference


* graphviz

[[https://www.graphviz.org/][Graphviz]] is open source graph visualization software that takes descriptions of
graphs in a simple text language and make diagrams in useful formats.


* htop

[[http://hisham.hm/htop/index.php][htop]] is an interactive process viewer for Linux(and ported to Mac OS X). It is
a text-mode application and requires [[http://en.wikipedia.org/wiki/Ncurses][ncurses]] library.

It's a better replacement for the traditional builtin [[http://en.wikipedia.org/wiki/Top_(software)][top]] program.

Type ~h~ from within ~htop~ to get instant help.


* httpie

[[https://httpie.org/][HTTPie]] a command line HTTP client with an intuitive UI, JSON support, syntax
highlighting, wget-like downloads, plugins, and more. It has a huge collection
of [[https://httpie.org/doc][features]] with sensible defaults.

Consider httpie as a modern curl.


* imagemagick

[[https://imagemagick.org/index.php][imagemagick]] provides a collection of command line tools to manipulate images.


* jq

[[https://stedolan.github.io/jq/][jq]] is like ~sed~ for JSON data - you can use it to slice and filter and map and
transform structured data with the same ease that ~sed~, ~awk~, ~grep~ and
friends let you play with text.


* md5sha1sum

[[http://www.microbrew.org/tools/md5sha1sum/][md5sha1sum]] package provides the missing ~md5sum~, ~sha1sum~ command for Mac OS
X.


* pstree

[[http://www.thp.uni-duisburg.de/pstree/][pstree]] is a small program that shows a list of process as a tree.


* ranger

[[http://ranger.nongnu.org/][ranger]] is a CLI file manager with Vi key bindings. Just as htop, ranger depends
[[http://en.wikipedia.org/wiki/Ncurses][ncurses]] library. It provides a minimalistic and nice CLI interface with VI key
bindings for fast file and directory navigation. It can also guess which
program you want to use when open particular files.

Try it and I'm sure you will fall in love with it. Check its [[http://ranger.nongnu.org/screenshots.html][screenshots]] for
some intuition.


* rlwrap

[[https://github.com/hanslub42/rlwrap][rlwrap]] is a 'readline wrapper', a small utility that uses the GNU readline
library to allow the editing of keyboard input for any command. You have
rlwrap, then you have the great, pervasive readline's history, search,
shortcuts at your fingertips for any CLI programs.

Here's some tutorials from its home page:

** HOW TO USE IT:

If

#+begin_src
$ <command> <args>
#+end_src

doesn't let you use arrow keys to edit input, or if you just want decent input
history and completion, try:

#+begin_src
$ rlwrap [-options] <command> <args>
#+end_src

You then can edit ~<command>~'s input and recall the input history using the
arrow keys.  Input history is remembered accross invocations, separately for
different ~<command>~. Typing ~!<prefix><TAB>~ will recall the last input line
starting with ~<prefix>~, ~CTRL-R~ will search the input history.  With the
~-r~ and ~-f~ options you can specify the list of words which rlwrap will use
as possible completions, taking them from a file (~-f~ option) or from
~<command>~'s standard in/output.  rlwrap monitors ~<command>~'s terminal settings,
so that it can do the right thing when command asks for single keypresses or
for a password.  Commands that already use readline will always ask for (and
get) single keypresses, which makes rlwrapping them rather pointless. However,
if one uses the ~-a~ option, rlwrap will use its own line editing and
history. Unforunately, in this case, rlwrap cannot detect whether ~<command>~
asks for a password. This can be remedied by giving the password prompt
(excluding trailing space and possibly the first few letters) as an argument to
the ~-a~ option.

** EXAMPLES:
Run netcat with command-line editing:

#+begin_src
rlwrap nc localhost 80
#+end_src

Run lprolog and use library1 and library2 to build a completion word
list:

#+begin_src
rlwrap -f library1 -f library2 lprolog
#+end_src

Run smbclient (which already uses readline), add all input and output
to completion list, complete local filenames, avoid showing (and
storing) passwords:

#+begin_src
rlwrap -cr -aPassword: smbclient '\\PEANUT\C'
#+end_src


* texinfo

Besides [[http://en.wikipedia.org/wiki/Man_page][man pages]], GNU [[http://www.gnu.org/software/texinfo/][texinfo]] is another popular documentation system, and it
is the official documentation format for the GNU project.

Some packages may need texinfo to faciliate the build process. So we add it
here.


* tokei

[[https://github.com/XAMPPRocky/tokei][tokei]] is a line of code counter which is written by rust. It runs really fast.


* tig

[[https://github.com/jonas/tig][tig]] is a text-mode interface for git.


* tldr

[[https://github.com/tldr-pages/tldr][tldr]] is a collection of simplified and community-driven man pages.


* tmux


[[https://developer.apple.com/xcode/][tmux]] is a terminal multiplexer.

By multiplexer, it means you can create windows, panels in a single terminal
windows. No need for traditional vertical or horizontal splitting features from
terminal emulators. You can switch between windows, panels without touching the
mouse, and you can create, attach, detach sessions at any time. IMHO, tmux is a
killer app for CLI gurus.

There's a wonderful book, <[[https://pragprog.com/book/bhtmux/tmux][tmux: Productive Mouse-Free Development]]> by [[http://bphogan.com/][Brian
P.Hogan]]. oh-my-laptop steals some code snippets from this book and replace the
prefix key ~C-b~ with ~C-l~. Note that tmux's key bindings is case sensitive,
so when weird things happened, check your CAPSLOCK first.

Last but now least, you'd better install latest version tmux to avoid some
weird bugs. On ubuntu, you can do like [[http://stackoverflow.com/questions/25940944/ugrade-tmux-from-1-8-to-1-9-on-ubuntu-14-04][this]].


* wget

GNU Wget is a free software package for retrieving files using HTTP, HTTPS and
FTP, the most widely-used Internet protocols.

Mac OS X didn't has it by default, so we add it here.
